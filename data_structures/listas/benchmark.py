import time
import matplotlib.pyplot as plt
class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.siguiente = None  # Apunta al siguiente nodo
        
class ListaEnlazada:
    def __init__(self):
        self.cabeza = None

    # Acceso a un elemento en una Lista Enlazada
    # M√©todo iterativo
    def acceder_iterativo(self, index):
        actual = self.cabeza
        contador = 0
        while actual:
            if contador == index:
                return actual.valor
            actual = actual.siguiente
            contador += 1
        return None  # √çndice fuera de rango

    # M√©todo recursivo
    def acceder_recursivo(self, nodo, index):
        if not nodo:  
            return None  # Caso base: √≠ndice fuera de rango
        if index == 0:
            return nodo.valor  # Caso base: encontramos el nodo
        return self.acceder_recursivo(nodo.siguiente, index - 1)  # Llamada recursiva

    # Insertamos un valor en una posici√≥n espec√≠fica.
    # M√©todo iterativo
    def insertar_iterativo(self, index, valor):
        nuevo_nodo = Nodo(valor)
        if index == 0:
            nuevo_nodo.siguiente = self.cabeza
            self.cabeza = nuevo_nodo
            return
        actual = self.cabeza
        contador = 0
        while actual and contador < index - 1:
            actual = actual.siguiente
            contador += 1
        if not actual:
            return  # √çndice inv√°lido
        nuevo_nodo.siguiente = actual.siguiente
        actual.siguiente = nuevo_nodo

    # M√©todo recursivo
    def insertar_recursivo(self, nodo, index, valor):
        if index == 0:
            nuevo_nodo = Nodo(valor)
            nuevo_nodo.siguiente = nodo
            return nuevo_nodo
        if not nodo:
            return None  # √çndice inv√°lido
        nodo.siguiente = self.insertar_recursivo(nodo.siguiente, index - 1, valor)
        return nodo

# üî• Prueba de rendimiento
tamanios = [100, 500, 1000, 5000, 10000]
tiempos_acceso_iter = []
tiempos_acceso_recur = []
tiempos_insert_iter = []
tiempos_insert_recur = []

# Creamos una lista
for n in tamanios:
    lista = ListaEnlazada()
    for i in range(n):
        lista.insertar_iterativo(i, i)

    # Medimos acceso iterativo
    start = time.time()
    lista.acceder_iterativo(500)
    end = time.time()
    tiempos_acceso_iter.append(end - start)

    # Medimos acceso recursivo
    start = time.time()
    lista.acceder_recursivo(lista.cabeza, 500)
    end = time.time()
    tiempos_acceso_recur.append(end - start)

    # Medimos inserci√≥n iterativa
    start = time.time()
    lista.insertar_iterativo(500, 9999)
    end = time.time()
    tiempos_insert_iter.append(end - start)

    # Medimos inserci√≥n recursiva
    start = time.time()
    lista.cabeza = lista.insertar_recursivo(lista.cabeza, 500, 9999)
    end = time.time()
    tiempos_insert_recur.append(end - start)

print(f"Tama√±os probados: {tamanios}")
print(f"Tiempos Acceso Iterativo: {tiempos_acceso_iter}")
print(f"Tiempos Acceso Recursivo: {tiempos_acceso_recur}")
print(f"Tiempos Inserci√≥n Iterativa: {tiempos_insert_iter}")
print(f"Tiempos Inserci√≥n Recursiva: {tiempos_insert_recur}")

# üìä Generar gr√°fico
plt.figure(figsize=(10, 5))

# Gr√°fico de acceso
plt.subplot(1, 2, 1)
plt.plot(tamanios, tiempos_acceso_iter, label="Acceso Iterativo", marker="o")
plt.plot(tamanios, tiempos_acceso_recur, label="Acceso Recursivo", marker="s")
plt.xlabel("Tama√±o de la lista")
plt.ylabel("Tiempo (s)")
plt.title("Tiempo de Acceso")
plt.legend()
plt.grid()

# Gr√°fico de inserci√≥n
plt.subplot(1, 2, 2)
plt.plot(tamanios, tiempos_insert_iter, label="Inserci√≥n Iterativa", marker="o")
plt.plot(tamanios, tiempos_insert_recur, label="Inserci√≥n Recursiva", marker="s")
plt.xlabel("Tama√±o de la lista")
plt.ylabel("Tiempo (s)")
plt.title("Tiempo de Inserci√≥n")
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()